name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_BUILDKIT: 1

jobs:

  frontend:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: NPM Cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Build Docker images
        run: |
          make IMAGE_TAG=${IMAGE_TAG} TARGET=prod build
          make IMAGE_TAG=${IMAGE_TAG} TARGET=dev build

      - name: Lint
        run: |
          make IMAGE_TAG=${IMAGE_TAG} lint

      - name: Test
        run: |
          make IMAGE_TAG=${IMAGE_TAG} test

      - name: Ingestion smoke test
        run: |
          make IMAGE_TAG=${IMAGE_TAG} INGEST_ONLY=non-existent-group INGEST_DEBUG=true ingest-evaluations

      - name: Server smoke test
        run: |
          .github/smoke-test.sh

      - name: Backstop test
        run: |
          make IMAGE_TAG=${IMAGE_TAG} backstop-test

      - name: Taiko
        run: |
          make taiko

      - name: Push Image to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${DOCKERHUB_PASSWORD}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
          docker push sciety/sciety:${IMAGE_TAG}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Deploy to staging
        if: github.ref == 'refs/heads/main'
        run: |
          aws --region=us-east-1 eks update-kubeconfig --name libero-eks--franklin
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dependency build helm/sciety
          helm upgrade -i sciety--staging \
            --set images.frontend.tag=${IMAGE_TAG} \
            --set hostname=staging.sciety.org \
            --set crossrefApiBearerToken=${CROSSREF_API_BEARER_TOKEN} \
            --set-string experimentEnabled="true" \
            --set appSecret=${APP_SECRET} \
            --set appCache=redis \
            --set auth0ClientId=${AUTH0_CLIENT_ID_STAGING} \
            --set auth0ClientSecret=${AUTH0_CLIENT_SECRET_STAGING} \
            --set auth0Domain='sciety-staging.eu.auth0.com' \
            --set auth0CallbackUrl='https://staging.sciety.org/auth0/callback' \
            --set postgresqlSecretName=hive-staging-rds-postgres \
            --set googleTagManagerId='GTM-NX7CQB4' \
            --set ingestionAuthBearerToken=${SCIETY_TEAM_API_BEARER_TOKEN} \
            --set prelightsFeedKey=${PRELIGHTS_FEED_KEY} \
            --set healthchecksPingKey=${HEALTHCHECKS_PING_KEY} \
            --wait \
            helm/sciety
        env:
          APP_SECRET: ${{ secrets.APP_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CROSSREF_API_BEARER_TOKEN: ${{ secrets.CROSSREF_API_BEARER_TOKEN }}
          SCIETY_TEAM_API_BEARER_TOKEN: ${{ secrets.SCIETY_TEAM_API_BEARER_TOKEN }}
          PRELIGHTS_FEED_KEY: ${{ secrets.PRELIGHTS_FEED_KEY }}
          AUTH0_CLIENT_ID_STAGING: ${{ secrets.AUTH0_CLIENT_ID_STAGING }}
          AUTH0_CLIENT_SECRET_STAGING: ${{ secrets.AUTH0_CLIENT_SECRET_STAGING }}
          HEALTHCHECKS_PING_KEY: ${{ secrets.HEALTHCHECKS_PING_KEY }}

      - name: Deploy to prod
        if: github.ref == 'refs/heads/main'
        run: |
          aws --region=us-east-1 eks update-kubeconfig --name libero-eks--franklin
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dependency build helm/sciety
          helm upgrade -i sciety--prod \
            --set-string allowSiteCrawlers=true \
            --set images.frontend.tag=${IMAGE_TAG} \
            --set hostname=sciety.org \
            --set fathomSiteId='DBULFPXG' \
            --set googleTagManagerId='GTM-NX7CQB4' \
            --set crossrefApiBearerToken=${CROSSREF_API_BEARER_TOKEN} \
            --set appSecret=${APP_SECRET} \
            --set appCache=redis \
            --set auth0ClientId=${AUTH0_CLIENT_ID} \
            --set auth0ClientSecret=${AUTH0_CLIENT_SECRET} \
            --set auth0Domain='sciety.eu.auth0.com' \
            --set auth0CallbackUrl='https://sciety.org/auth0/callback' \
            --set postgresqlSecretName=hive-prod-rds-postgres \
            --set ingestionAuthBearerToken=${SCIETY_TEAM_API_BEARER_TOKEN} \
            --set prelightsFeedKey=${PRELIGHTS_FEED_KEY} \
            --set healthchecksPingKey=${HEALTHCHECKS_PING_KEY} \
            --wait \
            helm/sciety
        env:
          APP_SECRET: ${{ secrets.APP_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CROSSREF_API_BEARER_TOKEN: ${{ secrets.CROSSREF_API_BEARER_TOKEN }}
          SCIETY_TEAM_API_BEARER_TOKEN: ${{ secrets.SCIETY_TEAM_API_BEARER_TOKEN }}
          PRELIGHTS_FEED_KEY: ${{ secrets.PRELIGHTS_FEED_KEY }}
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
          HEALTHCHECKS_PING_KEY: ${{ secrets.HEALTHCHECKS_PING_KEY }}

      - name: Notify Slack
        if: failure() && github.ref == 'refs/heads/main'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: sciety-commits
          status: FAILED
          color: danger

      - name: Archive Taiko screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: feature-test-screenshots
          path: feature-test/screenshots

      - name: Archive Backstop screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backstop_data
          path: backstop_data

  automerge:
    needs: frontend
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Enable auto-merge for Dependabot PR
        if: startsWith(steps.metadata.outputs.dependency-names, '@types') && steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
